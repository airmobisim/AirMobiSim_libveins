
#
# Copyright (C) 2017 Rudolf Hornig <rudi@omnetpp.org>
# Copyright (C) 2018-2020 Christoph Sommer <sommer@cms-labs.org>
#
# Documentation for these modules is at http://veins.car2x.org/
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


#
# on windows, special care is needed for linking
# adapted from INET Framework (inet-4.2.1) makefrag
#
ifeq ($(PLATFORM),win32.x86_64)
  #
  # on windows we have to link with the ws2_32 (winsock2) library as it is no longer added
  # to the omnetpp system libraries by default (as of OMNeT++ 5.1)
  #
  LIBS += -lws2_32
  ENABLE_AUTO_IMPORT=-Wl,--enable-auto-import
  LDFLAGS := $(filter-out $(ENABLE_AUTO_IMPORT), $(LDFLAGS))

  # FIX for clang not exporting typeinfo and other thunks on Windows
  ifeq ($(CC),clang)
    DEFFILE = $O/typeinfo.def
    LDFLAGS += $(DEFFILE)

.PHONY: all

all:

$(DEFFILE): $(OBJS)  $(wildcard $(EXTRA_OBJS)) Makefile $(CONFIGFILE)
	$(Q)$(DLLTOOL) --export-all-symbols --kill-at --output-def $O/all.def $(OBJS) $(EXTRA_OBJS)
	$(Q)grep -E '( *_ZTI)|( *_ZThn)|( *_ZTv0)|EXPORTS' $O/all.def | sed 's/ @.*//' >$(DEFFILE)

$O/$(TARGET): $(DEFFILE)

  endif
endif


#
# Use the new message compiler introduced in OMNeT++ 5.3
#
MSGC:=$(MSGC) --msg6

include ../conanbuildinfo.mak
INCLUDE_PATH += $(addprefix -I, $(CONAN_INCLUDE_DIRS))


OMNETPP_LIBS += $(CONAN_ROOT_GRPC)/lib/libgrpc++.a
OMNETPP_LIBS += $(CONAN_ROOT_GRPC)/lib/libgrpc.a
OMNETPP_LIBS += $(CONAN_ROOT_GRPC)/lib/libgpr.a
OMNETPP_LIBS += $(CONAN_ROOT_GRPC)/lib/libupb.a
OMNETPP_LIBS += $(CONAN_ROOT_GRPC)/lib/libaddress_sorting.a
# Idea: Nimm alles und wirf alles mit 'unsafe' raus (for GRPC)
OMNETPP_LIBS += $(addprefix $(CONAN_ROOT_OPENSSL)/lib/lib, $(addsuffix .a, $(CONAN_LIBS_OPENSSL)))
OMNETPP_LIBS += $(addprefix $(CONAN_ROOT_PROTOBUF)/lib/lib, $(addsuffix .a, $(CONAN_LIBS_PROTOBUF)))
OMNETPP_LIBS += $(addprefix $(CONAN_ROOT_C-ARES)/lib/lib, $(addsuffix .a, $(CONAN_LIBS_C-ARES)))
OMNETPP_LIBS += $(addprefix $(CONAN_ROOT_ABSEIL)/lib/lib, $(addsuffix .a, $(CONAN_LIBS_ABSEIL)))
OMNETPP_LIBS += $(addprefix $(CONAN_ROOT_RE2)/lib/lib, $(addsuffix .a, $(CONAN_LIBS_RE2)))
OMNETPP_LIBS += $(addprefix $(CONAN_ROOT_ZLIB)/lib/lib, $(addsuffix .a, $(CONAN_LIBS_ZLIB)))
OMNETPP_LIBS += $(addprefix -l, $(CONAN_SYSTEM_LIBS))

#TODO: CHeck CONAN_FRAMEWORKS contains entries
OMNETPP_LIBS += $(addprefix -framework , $(CONAN_FRAMEWORKS)) # TODO: Check if this works with linux




#
# Protobuf
#

PROTO_IN_PATH=..
PROTO_OUT_PATH=veins_libairmobisim/proto

all:

veins_libairmobisim/mobility/DroCIManager.cc: veins_libairmobisim/mobility/DroCIManager.h

veins_libairmobisim/mobility/DroCIManager.h: veins_libairmobisim/proto/airmobisim.grpc.pb.h

veins_libairmobisim/proto/airmobisim.grpc.pb.h: ../airmobisim.proto
	$(CONAN_ROOT_PROTOBUF)/bin/protoc --proto_path $(PROTO_IN_PATH) --cpp_out $(PROTO_OUT_PATH) "$<"
	$(CONAN_ROOT_PROTOBUF)/bin/protoc --proto_path $(PROTO_IN_PATH) --grpc_out=$(PROTO_OUT_PATH) --plugin=protoc-gen-grpc=$(CONAN_ROOT_GRPC)/bin/grpc_cpp_plugin "$<"
